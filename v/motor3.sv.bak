module motor_control(
	input i_clock, //40M
	input i_rst,
	input i_start,
	input [8:0]i_coord_x,
	input [8:0]i_coord_y,
	input i_done,
	output o_request_coord,
	output o_en_x_y,
	output o_step_x,
	output o_dir_x,
	output o_step_y,
	output o_dir_y,
	output o_z,
	output [1:0]o_state, //test
	output [8:0]o_coord_x, //test
	output [8:0]o_coord_y //test
);
logic [7:0]cnt_x,cnt_y;
logic [20:0]cnt_z;
logic [15:0]step_clk;
logic up_and_down;
logic [1:0]state; //0:wait 1:start 2:stop 3:over
logic dir_x,dir_y,en_x_y;
logic [8:0]pre_x,pre_y,cur_x,cur_y;
logic wait_nxt_coord,get_data;
logic coord_z;
logic [7:0]touch_times;
logic en_step_x,en_step_y;
logic [20:0] wait_move;

assign o_step_x = en_step_x ? up_and_down : 0;
assign o_step_y = en_step_y ? up_and_down : 0;
assign o_dir_x = dir_x;
assign o_dir_y = dir_y;
assign o_en_x_y = en_x_y;
assign o_request_coord = wait_nxt_coord;
assign o_z = coord_z;
assign o_state = state;
assign o_coord_x = cur_x;
assign o_coord_y = cur_y;

always_ff @(posedge i_clock or negedge i_rst) begin 
	if(!i_rst) begin
		 cnt_x <= 0;
		 cnt_y <= 0;
		 step_clk <= 0;
		 up_and_down <= 0;
		 state <= 0;
		 dir_x <= 0;
		 dir_y <= 0;
		 en_x_y <= 1;
		 en_step_x <= 0;
		 en_step_y <= 0;
		 wait_nxt_coord <= 0;
		 pre_x <= 0;
		 pre_y <= 0;
		 cur_x <= 0;
		 cur_y <= 0;
		 cnt_z <= 0;
		 coord_z <= 0;
		 touch_times <= 0;
		 get_data <= 0;
		 wait_move <= 0;
	end 
	else begin
		 step_clk <= (step_clk+1 == 8000) ? 0 : step_clk+1;
	 	 up_and_down <= (step_clk+1 == 8000) ? (!up_and_down) : up_and_down;
	 	 cnt_z <= (cnt_z+1 == 800000) ? 0 : cnt_z+1;
		 if(state == 0 && i_start) begin
				state <= 1;
				dir_x <= 0;
				dir_y <= 0;
				cnt_x <= 0;
				cnt_y <= 0;
				en_x_y <= 0;
				en_step_x <= 0;
				en_step_y <= 0;
				wait_nxt_coord <= 1;
				pre_x <= 0;
				pre_y <= 0;
				cur_x <= 0;
				cur_y <= 0;
				touch_times <= 0;
				get_data <= 0;
				wait_move <= 0;
				coord_z <= (cnt_z < 60000) ? 1 : 0;
		 end
		 else begin
		 	if(state == 1) begin
	 			if(wait_nxt_coord) begin
	 				coord_z <= (cnt_z < 70000) ? 1 : 0;
	 				wait_nxt_coord <= 0;
	 			end else begin
	 				if(i_done) begin
	 					coord_z <= (cnt_z < 70000) ? 1 : 0;
	 					cur_x <=  i_coord_x;
						//pre_x <= ((i_coord_x < pre_x)&&(pre_x-i_coord_x>5))? pre_x-1 :pre_x;
	 					cur_y <= i_coord_y;
	 					cnt_x <= 0;
	 					cnt_y <= 0;
	 					get_data <= 1;
	 					if(i_coord_x == 511 && i_coord_y == 511) begin
	 						state <= 3;
	 					end
	 				end
	 				else if(get_data) begin
	 					if(cur_x == pre_x && cur_y == pre_y) begin
	 						en_step_x <= 0;
	 						en_step_y <= 0;
							if(touch_times >= 20 && touch_times <= 30) begin
								coord_z <= (cnt_z < 80000) ? 1 : 0;
							end else begin
								coord_z <= (cnt_z < 70000) ? 1 : 0;
							end
							if(cnt_z == 0) begin
								if(touch_times == 50) begin
									touch_times <= 0;
									wait_nxt_coord <= 1;
									get_data <= 0;
								end else begin
									touch_times <= touch_times+1;
								end
							end
	 					end else begin
	 						coord_z <= (cnt_z < 70000) ? 1 : 0;
							if(wait_move != 0)begin 
								en_step_x <= 0;
								en_step_y <= 0;
								wait_move <= ((wait_move+1 == 400000)?0:wait_move+1); 
							end
							else if(step_clk == 0 && up_and_down) begin
								if(cur_x < pre_x) begin
									en_step_x <= 1;
									en_step_y <= 1;
									dir_x <= 1;
									dir_y <= 1;
									if(cnt_x+1 == 30) begin
										pre_x <= pre_x-1;
										if(cur_x == pre_x-1) wait_move <= 1;
										cnt_x <= 0;
									end else begin
										cnt_x <= cnt_x+1;
									end
								end else if(cur_x > pre_x) begin
									en_step_x <= 1;
									en_step_y <= 1;
									dir_x <= 0;
									dir_y <= 0;
									if(cnt_x+1 == 30) begin
										pre_x <= pre_x+1;
										//wait_move <= 1;
										cnt_x <= 0;
									end else begin
										cnt_x <= cnt_x+1;
									end
								end else if(cur_y < pre_y) begin
									en_step_x <= 1;
									en_step_y <= 1;
									dir_x <= 0;
									dir_y <= 1;
									if(cnt_y+1 == 30) begin
										pre_y <= pre_y-1;
										cnt_y <= 0;
									end else begin
										cnt_y <= cnt_y +1;
									end
								end else if(cur_y > pre_y) begin
									en_step_x <= 1;
									en_step_y <= 1;
									dir_x <= 1;
									dir_y <= 0;
									if(cnt_y+1 == 30) begin
										pre_y <= pre_y+1;
										cnt_y <= 0;
									end else begin
										cnt_y <= cnt_y +1;
									end
								end
							end
		 				end
		 			end
					else coord_z <= (cnt_z < 70000) ? 1 : 0;
	 			end
			end
			else coord_z <= (cnt_z < 70000) ? 1 : 0;
		 end
	end
end
endmodule // motor_control